{"version":3,"sources":["Assets/art.svg","serviceWorker.ts","Components/ToDo/ToDo.tsx","Components/common/BrowserAsset/styled.ts","utils/variable.ts","Components/common/BrowserAsset/index.ts","Components/common/BrowserAsset/BrowserAsset.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ToDo","_ref","list","deleteToDo","whatToShow","length","map","item","react_default","a","createElement","style","backgroundColor","margin","borderRadius","height","justifyItems","boxShadow","key","id","color","onClick","name","MainContainer","styled","div","_templateObject","HeadContainer","_templateObject2","PurpleContainer","_templateObject3","ItemContainer","_templateObject4","Input","input","_templateObject5","Span","span","_templateObject6","innerHeight","width","innerWidth","BrowserAsset","AddToDo","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","marginLeft","marginTop","display","alignItems","onSubmit","e","preventDefault","console","log","handleSubmit","type","value","onChange","target","handleChange","borderColor","Components_ToDo_ToDo","position","bottom","src","require","alt","App","setList","common_BrowserAsset","toDoItem","newItem","Math","random","newList","concat","toConsumableArray","deletedList","filter","listItem","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3aa102ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/art.066543a6.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { List } from '../MainComponent/MainComponent'\n\ninterface Props {\n  list: List[]\n  deleteToDo(value: number): void\n}\n\nconst ToDo: React.FC<Props> = ({ list, deleteToDo }) => {\n  const whatToShow = list.length ? (\n    list.map(item => (\n      <div\n        style={{\n          backgroundColor: '#6C63FF',\n          margin: '10px',\n          borderRadius: '2PX',\n          height: '30px',\n\n          justifyItems: 'center',\n          boxShadow: '1px 1px 5px 0.1px #1c1b1b'\n        }}\n        key={item.id}\n      >\n        <span style={{ color: 'white' }} onClick={() => deleteToDo(item.id)}>\n          {item.name}\n        </span>\n      </div>\n    ))\n  ) : (\n    <p>'Nothing to show!'</p>\n  )\n\n  return <div>{whatToShow}</div>\n}\n\nexport default ToDo\n","import styled from 'styled-components'\n\nexport const MainContainer = styled.div`\n  background-color: #f2f2f2;\n  width: 90vh;\n  height: 70vh;\n  border-top-right-radius: 20px;\n  border-top-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border-bottom-left-radius: 20px;\n  box-shadow: 2px 2px 10px 1px #1c1b1b;\n`\n\nexport const HeadContainer = styled.div`\n  background-color: #3f3d56;\n  width: inherit;\n  height: 20px;\n  z-index: 1;\n  position: absolute;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n`\n\nexport const PurpleContainer = styled.div`\n  background-color: #6c63ff;\n  width: 30vh;\n  height: inherit;\n  z-index: 0;\n  position: absolute;\n  border-top-right-radius: 20px;\n  border-top-left-radius: 20px;\n  border-bottom-left-radius: 20px;\n`\nexport const ItemContainer = styled.div`\n  flex-direction: row;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n  top: 20%;\n  left: 150%;\n`\nexport const Input = styled.input`\n  background-color: #d0cde1;\n  border: solid;\n  border-width: 1px;\n  height: 22px;\n  width: 120px;\n`\n\nexport const Span = styled.span`\n  margin: 2px;\n  font-size: 20px;\n  margin-right: 20px;\n  width: 150px;\n`\n","const height = window.innerHeight\nconst width = window.innerWidth\n\nexport { width, height }\n","import BrowserAsset from './BrowserAsset'\n\nexport default BrowserAsset\n","import React, { useState } from 'react'\nimport { List } from '../../MainComponent/MainComponent'\nimport ToDo from '../../ToDo/ToDo'\nimport { MainContainer, PurpleContainer, HeadContainer, ItemContainer, Input, Span } from './styled'\nimport { width, height } from '../../../utils/variable'\n\ninterface Props {\n  AddToDo: (value: string) => void\n  list: List[]\n  deleteToDo(value: number): void\n}\n\nconst BrowserAsset: React.FC<Props> = ({ AddToDo, list, deleteToDo }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleChange = (e: any) => {\n    const value = e.target.value\n    setInputValue(value)\n  }\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault()\n    console.log(inputValue)\n    AddToDo(inputValue)\n    setInputValue('')\n  }\n\n  return (\n    <MainContainer style={{ marginLeft: width / 4, marginTop: height / 8 }}>\n      <HeadContainer />\n      <PurpleContainer>\n        <ItemContainer>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center'\n            }}\n          >\n            <Span>ADD ITEM: </Span>\n            <div>\n              <form onSubmit={e => handleSubmit(e)}>\n                <Input type=\"text\" value={inputValue} onChange={e => handleChange(e)} />\n              </form>\n            </div>\n          </div>\n          <div\n            style={{\n              borderColor: 'black',\n              marginTop: '200px'\n            }}\n          >\n            <ToDo list={list} deleteToDo={deleteToDo} />\n          </div>\n        </ItemContainer>\n        <img\n          style={{ position: 'absolute', bottom: -height / 9 }}\n          src={require('../../../Assets/art.svg')}\n          alt=\"logo of a man sitting on his laptop\"\n        />\n      </PurpleContainer>\n    </MainContainer>\n  )\n}\n\nexport default BrowserAsset\n","import React, { useState } from 'react'\nimport BrowserAsset from './Components/common/BrowserAsset'\nimport ToDo from './Components/ToDo/ToDo'\n\nexport type List = {\n  id: number\n  name: string\n}\n\nexport type DeleteToDo = {\n  deleteTodo: () => void\n}\n\nconst App: React.FC = () => {\n  const [list, setList] = useState([{ id: 1, name: 'apples' }])\n\n  const AddItemToList = (toDoItem: string) => {\n    let newItem = { id: Math.random(), name: toDoItem }\n    const newList = [...list, newItem]\n    setList(newList)\n  }\n\n  const deleteToDo = (id: number) => {\n    const deletedList = list.filter((listItem: List) => {\n      return listItem.id !== id\n    })\n    setList(deletedList)\n  }\n\n  return (\n    <div>\n      <BrowserAsset AddToDo={AddItemToList} list={list} deleteToDo={deleteToDo} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}